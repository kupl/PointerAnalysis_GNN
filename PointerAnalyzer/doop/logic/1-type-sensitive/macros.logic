#include "../library/fact-macros.logic"

// We need to *pretend* we are creating new contexts, since the
// product of the macro goes to the head of a rule.
#define RecordMacro(ctx, heap, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[] = hctx

#define RecordImmutableMacro(ctx, heap, immCtx) \
  HContext(immCtx), \
  HContextFromRealHContext[] = immCtx


// For this analysis the context of a method call corresponds to the
// declaring class of the receiver object. Again, this may trigger creation
// of a new object.
#define MergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[DeclaringClassAllocation[heap]] = calleeCtx

#define MergeBasisMacro(callerCtx, invocation, hctx, heap) \
  MergeBasis(callerCtx, invocation, hctx, heap)

#define OptimizeMergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  OptimizeMerge[heap] = calleeCtx

// For this analysis, static calls just keep the same context as the
// caller. *Not* creating a new one, but pretending to, nonetheless,
// so the engine doesn't barf.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContextFromContext[callerCtx]] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, heap, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[DeclaringClassAllocation[heap]] = newCtx

#define MergeStartupMacro(hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[DeclaringClassAllocation[heap]] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, heap, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[DeclaringClassAllocation[heap]] = newCtx

#define MergeImmutableMacro(immCtx) \
  Context(immCtx), \
  ContextFromRealContext[ImmutableTypeValue[]] = immCtx
