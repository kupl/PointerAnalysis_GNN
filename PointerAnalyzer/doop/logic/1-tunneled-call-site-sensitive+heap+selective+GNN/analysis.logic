/**
 * Context-sensitive pointer analysis with context of 1 call site and
 * a context-sensitive heap abstraction of 1 call site
 *
 * @author Martin Bravenboer
 * @author George Kastrinis
 */

#include "macros.logic"
//#include "myInvo.logic"
//#include "heuristic.logic"
//#include "features_oopsla18.logic"
#include "features_21.logic"
//#include "features_sobj.logic" // 11.18

//#include "MFeatures.logic"
#include "selective_heuristic.logic"

//#include "features_0818.logic"
//#include "heuristic_alpa.logic"
//#include "heuristic_oopsla18.logic"
//#include "heuristic_ICSE21.logic"
#include "tunneling_heuristic.logic"
//#include "heuristic_sobj.logic" // 11.18

//#include "heuristic_optimal.logic"
//#include "heuristic_version1.logic"
#include "../context-sensitive.logic"
#include "../library.logic"

//#include "../taint/sources-and-sink.logic"

// In this analysis, both the real context and the real heap context 
// are MethodInvocationRefs. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
ContextFromRealContext[?invocation] = ?ctx ->
  Context(?ctx), CallGraphEdgeSourceRef(?invocation).
lang:skolem(`ContextFromRealContext).
RealContextFromContext[?ctx] = ?invocation ->
  Context(?ctx), CallGraphEdgeSourceRef(?invocation).
RealContextFromContext[?ctx] = ?invocation <- 
  ContextFromRealContext[?invocation] = ?ctx.

HContextFromRealHContext[?invocation] = ?hctx ->
  HContext(?hctx), CallGraphEdgeSourceRef(?invocation).
lang:skolem(`HContextFromRealHContext).

// Creating special immutable method invocation constant
ImmutableInvValue[] = ?immInv <-
  MethodInvocationValue(?immInv, "<<immutable>>").


// Create initial objects with their heapcontexts.
HContextFromRealHContext[?invocation] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?invocation, ?alloc).

HContextFromRealHContext[?invocation] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?invocation, ?alloc).

HContextFromRealHContext[?invocation] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?invocation, ?alloc).

StartupInvocation[] = ?startupInvocation <-
#ifdef PADDLE_COMPAT
  MethodInvocationValue(?startupInvocation, "<<no-context>>").
#else
  MethodInvocationValue(?startupInvocation, "<<jvm-startup>>").
#endif


/**
 * Reachable
 */

InitialMethod(?method),
ReachableContext(?ctx, ?method),
ContextFromRealContext[?invo] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
#ifdef PADDLE_COMPAT
  MethodInvocationValue(?invo, "<<no-context>>").
#else
  MethodInvocationValue(?invo, "<<initial-context>>").
#endif

InitialMethod(?method),
ReachableContext(?ctx, ?method),
ContextFromRealContext[?invo] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
#ifdef PADDLE_COMPAT
  MethodInvocationValue(?invo, "<<no-context>>").
#else
  MethodInvocationValue(?invo, "<<initial-context>>").
 // MethodInvocationValue(?invo, "<<jvm-startup>>").
#endif

InitialMethod(?clinit),
ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?invo] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
#ifdef PADDLE_COMPAT
  MethodInvocationValue(?invo, "<<no-context>>").
#else
  MethodInvocationValue(?invo, "<<initial-context>>").
  //MethodInvocationValue(?invo, "<<class-initialization>>").
#endif
